/**
 *@file
 *@brief Building PSInterface 
 *
 * Thomas Burgess
 * (c) the IceCube Collaboration
 *
 * $Revision: 1.7 $
 * $Author$
 * $Date$
 * $Id$
 */

/**
@page buildingpsinterface Building PSInterface

@section ObtainingPSInterface Obtaining PSInterface 
  
PSInterface is included in the 
<a href="http://software.icecube.wisc.edu/SIMULATION/">
SIMULATION meta project</a> which can be obtained from the 
<a href="http://code.icecube.wisc.edu">IceCube SVN archive</a> by
<pre>
svn co http://code.icecube.wisc.edu/svn/meta-projects/simulation/releases/current simulation
</pre>

To obtain only the latest (and possibly unstable) bleeding edge PSInterface
use
<pre>
svn co http://code.icecube.wisc.edu/svn/projects/PSInterface/trunk PSInterface
</pre>
to check out the previous release of PSInterface use
<pre>
svn co http://code.icecube.wisc.edu/svn/projects/PSInterface/branches/Lumpy PSInterface</pre>

If not using SVN try looking at the
<a href="http:/www.physto.se/~burgess/work/PSInterface">
PSInterface homepage</a>

@section PSInterfaceDependencies PSInterface dependencies

@subsection ROOT 
 
By default PSInterface is compiled with <a href="http://root.cern.ch">ROOT</a>
support so it can be used interactively in root or for root batch jobs. 
PSInterface has been well tested with ROOT 4.04/02g on fedora core 3 and 
ROOT 5.04/00 on fedora core 4. 

To use root the easiest way is to download the binary distribution,
unpack it somewhere (for example /opt or ${HOME}/local/root ) and set
the environment variables:
<pre>
ROOTSYS ${HOME}/local/root
PATH    ${PATH}:${ROOTSYS}/bin
LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${ROOTSYS}/lib
</pre>
In some cases a home built version of root is preferable, how to do this is
explained on my <a href="http://www.physto.se/~burgess/work/Custom_Setup.php">
Custom Setup page</a>

If for some reason you don't want to use ROOT set the 
psidisableroot variable to something in Makefile.standalone

@subsection Photonics

Currently PSInterface requires at least Photonics v_1.40b2_19082005 to compile.
In case you use <code>offline-mk</code> the Photonics tool is downloaded
when doing <code>make rsync-tools</code>. If you get the wrong version or 
work standalone you can get a prebuilt photonics located at 
<a href="http://www.physto.se/~johan/Photonics/">Johans Photonics page</a>.

If working standalone set <code>PHOTONCISINC</code> to 
<code>/PATH/TO/photonicstool/include/</code> and 
<code>PHOTONICSLIB</code> to 
<code>/PATH/TO/photonicstool/${PLATFORM}/lib/photonics/</code>.

To build from scratch get the source code check it out from the Amanda CVS
(cvs -d:ext:username@pub3.amanda.wisc.edu:/net/local/cvsroot co photonics) 
or the 
<a href="http://www.amanda.wisc.edu/software/">AMANDA software pages</a>
and build the libraries needed for PSInterface by running
<code>make -f MakePhotonicsTool</code>. 

@subsection PTD

Either use the tool that comes when doing <code>make rsync-tools</code> or 
build your own libraries from scratch.

Get the source code check it out from the Amanda cvs 
(cvs -d:ext:username@pub3.amanda.wisc.edu:/net/local/cvsroot co ptd)
or the 
<a href="http://www.amanda.wisc.edu/software/">AMANDA software pages</a>.
Note that the cvs version should be newer than June 15 2004 in order for 
ptd to work when photonics is loaded.

Before compilation you need to create the directory <code>libptd</code> 
under the ptd root directory. Then go to the <code>readptd</code> directory 
and type <code>make</code> to build the <code>ptd</code> library. 
In <code>libptd</code> create a shared library by
<pre>
 ar -x libptd.a; g++ -shared *.o -o libptd.so; rm -f *.o 
</pre>
Now the .a and .so files can be moved wherever they are needed,

When building standalone remember to set your <code>LD_LIBRARY_PATH</code> and
<code>PTDLIB</code> to where the libraries where placed and also set the 
<code>PTDINC</code> to where you put <code>readptd.h</code>.

@section PSInterfaceOfflineMk Building using offline-mk

If PSInterface is checked out with SIMULATION the easiest way to build
is to use 
<a href="http://software.icecube.wisc.edu/OFFLINE-SOFTWARE/offline-mk/">
offline-mk</a>. This is done by simply running <code>make</code> in the 
PSInterface directory. If the build is successful the PSInterface shared 
library should appear in simulation/$(PLATFORM)/lib. 

If the build fails it may be because the PTD and Photinics libraries are
not found, to avoid this make sure that the settings in 
<code>simulation/offline-mk/config.mk</code> fit your system. 
A working example setup can look like:
<pre>
photonics_INC_DIR := photonics-v_1.40b3_19082005_tool/include
photonics_LIB_DIR := photonics-v_1.40b3_19082005_tool/Linux-i386/lib/photonics/lib/
photonics_LIB := photoamasim level2amasim photonics

ptd_INC_DIR := ptd-1.0.0/include
ptd_LIB_DIR := ptd-1.0.0/$(PLATFORM)/ptd/lib
ptd_LIB := ptd
</pre>

To build these docs run <code>make doxygen</code>, the docs will appear in
<code>simulation/docs</code>.

To build the example scripts run <code>make</code> in 
<code>resources/scripts</code> one has to set 
the environment variables <code>PHOTONICSLIB</code>, 
<code>PHOTONICSINC</code>, <code>PTDLIB</code>, and <code>PTDINC</code>
to <code>Photonics</code> and <code>PTD</code> library and include paths.

@section PSInterfaceStandaloine Building standalone

Before building or running
- Set the environment variables <code>PHOTONICSLIB</code>, 
  <code>PHOTONICSINC</CODE>, <code>PTDLIB</code>, and <code>PTDINC</CODE>
  to <code>Photonics</code> and <code>PTD</code> library and include paths.
- Add the location of Photonics and PTD libraries to your 
  <code>LD_LIBRARY_PATH</code>

If for some reason you don't want to use ROOT set the 
psidisableroot variable to something in Makefile.standalone

To build PSInterface type make -f Makefile.standalone
The following makefile targets has been implemented
<dl>
 <dt>(default)</dt>
 <dd>
  Compile and build shared library
 </dd>
 <dt>clean</dt> 
 <dd>
  Remove all generated output
 </dd>
 <dt>Doxygen</dt>
 <dd>
  Generate <a href="http://www.doxygen.org">Doxygen</a> 
  documentation. You can run Doxygen stand alone too, 
  just type <code>doxygen doxygen.steering</code>.
 </dd>
 <dt>tgz</dt>
 <dd>
  Make a gzipped tar with everything needed to build PSInterface
 </dd>
</dl>
*/
