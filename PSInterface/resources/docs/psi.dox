/**
 *@file
 *@brief PSInterface main page documentation
 *
 * Thomas Burgess
 * (c) the IceCube Collaboration
 *
 * $Revision: 1.16 $
 * $Author$
 * $Date$
 * $Id$
 */

/**
 @mainpage PSInterface 
 @author Thomas Burgess

   PSInterface is a layer between the photon simulation and the simulation
   of hits in the optical modules. It is intended for use both within the 
   IceCube simulation framework and stand alone interactively in ROOT. By using
   PSInterface different photon simulation implementation can be accessed in
   a straightforward and uniform way. For uses this makes it easier to switch
   between different photon simulation implementation.

   Currently there are 3 implementations of PSInterface
   - PSI_Dummy for testing pruposes only
   - PSI_PTD for accessing PTD 
     (Photon Transportation and Detection simulation by A. Karle)
   - PSI_Photonics for accessing Photoncis 
     (originally by P.Miocinovic, maintained by J. Lundberg)

   Help for building the interface and dependencies can be found
   at the @ref buildingpsinterface page. PSInterface can be aquired from the 
   <a href="http://code.icecube.wisc.edu/">IceCube Software Repository</a>
  
   The purpose of the photon simulation software is to provide (for a given
   particle track and optical module)
   - Mean amplitude: Number of photo electrons produced in the photo 
                     multiplier tube. Accesed using GetMeanAmplitude
   - Hit time delay: The extra time it takes a photon to reach the optical 
                     module due to scattering. Accessed using GetTimeDelay
   - Hit probability:The probability of a hit given a time delay.
                     Accessed using GetProbability
  
   In order to access anything from the photon simulation a coordinate has to
   be determined, that is to say the geometrical relation between the track 
   producing the light and the optical module recieving the light. A coordinate
   can be calculated using MakeCoordinate.
  
   The mean amplitude is given with the respect to the energy of the track
   at the point of emmision. When simulating the propagation of tracks small
   energy losses are skipped, which means that that energy used in 
   GetMeanAmplitude should be downscaled to compensate this. This is not done
   in PSInterface since the track progagation specifics is unknown.
   Furthermore amplitudes are given for a 1m^2 detection area and assuming 
   100% peak efficiency which means that the amplitude recieved has to be 
   downscaled with the efficiency and optical module area.  
   For AMANDA the quantum efficiency factor is 0.23 and the area 0.0246 m^2.
  
   Given a mean amplitude, MA, the number of hits generated, NHIT, can be 
   simulated using a poissonian random number with expectation=MA. For this
   the function PSInterface::PoissonRandomNumber is included in PSInterface.
  
   Units used in PSInterface are degrees, GeV and meters, locations
   and angles are given in the AMANDA(IceCube) coordinate system.
  
@section PSInterfaceTables Tables
   
 - Photon tables can be found on Johans 
   <a href="http://www.physto.se/~johan/icecube/photontables.php">
   Photonics tables page</a>.

 - PTD tables can probably be found on the 
   <a href="http://amanda.wisc.edu/simulation/">AMANDA simulation page</a>

@section PSInterfaceExamples Example use
   The following code snippet is an example of psi use in a root 
   interactive session. One needs <code>libPSInterface.so</code> 
   and dependencies in <code>LD_LIBRARY_PATH</code>.
   In the example an instance of PSInterface is created and 
   the amplitude of a horizontal 10 GeV muon track starting at (0,0,0) 
   seen in a downlooking optical module at (0,0,-10) is retrieved. Next
   the amplitude is used to get the number of hits and for each hit a time
   delay is printed. (die prints a message and exits, random returns a 
   uniform random number)

  <pre>
  gSystem-&gt;Load("libPSInterface.so");
  PSInterface* psi = new PSI_Dummy();
  PSI_Coordinate* coord = psi-&gt;MakeCoordinate(0,0,-10,-1,0,0,0,90,0,100,0);
  double amplitude=-1;
  double energy=10; //10 GeV
  if (!psi-&gt;GetMeanAmplitude(amplitude,energy,coord))
      cerr &lt;&lt; "Failed to get mean ampitude" &lt;&lt; endl;
  cout &lt;&lt; "Amplitude=" &lt;&lt; amplitude &lt;&lt;endl;
  double dt=-1;
  double random=gRandom->Rndm(); //A uniform random number
  if (!psi-&gt:GetTimeDelay(dt,random,coord))
      cerr &lt;&lt; "Failed to get time delay" &lt;&lt; endl;
  cout &lt;&lt; "Time delay=" &lt;&lt; dt &lt;&lt;endl;
  double probability=-1;
  dt = gRandom->Rndm()*100; //A random time
  if (!psi-&gt;GetProbability(probability,dt,coord)) 
      cerr &lt;&lt; "Failed to get probability" &lt;&lt; endl;
  cout &lt;&lt; "Probability=" &lt;&lt; probability &lt;&lt;endl;
  delete coord;
  </pre>

For more examples see the <code>resources/script</code> folder in the
PSInterface distribution. 

@see simple.C 
@see directhits.C
@see cowboyTest.C
  
  <hr>

  Author:
  <a href="mailto:thomas dot burgess at physto dot se">
    Thomas Burgess
  </a>
  Last updated: March-07 2005

 
*/
